---
title: "Agriculture processing"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
from pygam import PoissonGAM, s, te, LinearGAM, GAM
from src.data.data_process import DataReg
from src.dao.zips_table import create_zips
from src.dao.muni_table import create_muni
import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import ibis

ibis.options.interactive = False
```

```{python}
d = DataReg()
df = d.semipar_data().select(["year", "qtr", "naics_code", "zipcode", "ui_addr_5_zip", "total_employment", "total_wages", "latitude", "longitude"])
df = df.mutate(
    total_wages=df.total_wages.fill_null(0),
    total_employment=df.total_employment.fill_null(0)
)
df = df.mutate(
    wages_employee=df.total_wages/df.total_employment,
    date=df.year.cast("string") + "Q" + df.qtr.cast("string"),
    )
df = df.mutate(
    wages_employee=df.wages_employee.fill_null(0)
)
df = df.mutate(
    min_wage=ibis.case()
        .when((df.year >= 2002) & (df.year < 2009), 5.15 * 65 * 8)
        .when((df.year >= 2010) & (df.year < 2023), 7.25 * 65 * 8)
        .when((df.year == 2023), 8.5 * 65 * 8)
        .when((df.year == 2024), 10.5 * 65 * 8)
        .else_(None)
        .end(),
)
df
```


```{python}
zips_df = d.conn.table("zipstable").drop("id").distinct(on="zipcode", keep='first')
muni_df = d.conn.table("munitable").drop("id")
df = df.join(zips_df, "zipcode", how="inner")
# df2 = df2.join(muni_df, predicates=["geo_id"], how="inner").distinct(on="geo_id", keep='first')
df
```


```{python}
mini = df.group_by(["year", "qtr", "naics_code", "geo_id"]).aggregate([
    df.wages_employee.mean().name("mw_industry")
])
df = df.join(mini, predicates=["year", "qtr", "naics_code", "geo_id"], how="inner")
df
```

```{python}
df = df.mutate(
    k_index=df.min_wage/df.mw_industry
    )
df
```

```{python}
df = df.filter(~df.ui_addr_5_zip.startswith("00"))
df = df.filter(df.year >= 2012)
df = df.to_pandas()
var = ["year", "k_index",  "latitude", "longitude"]
```

```{python}
df = df[df["latitude"] != ""]
df["latitude"] = df["latitude"].astype(float)
df["longitude"] = df["longitude"].astype(float)
```

```{python}
df = df[~df["k_index"].isnull()]
```

```{python}
# GAMM Mix model (Random Effects)
# binomal & categoricalas faactor 
gam = LinearGAM(s(0, n_splines=200) + s(1, n_splines=200) + te(2, 3)).fit(df[var].values, df[["total_employment"]].values)
gam.summary()
```

```{python}
plt.ion()
plt.rcParams['figure.figsize'] = (12, 8)
XX = gam.generate_X_grid(term=2, meshgrid=True)
Z = gam.partial_dependence(term=2, X=XX, meshgrid=True)

ax = plt.axes(projection='3d')
ax.plot_surface(XX[1], XX[1], Z, cmap='viridis')
```

```{python}
X = df[var]
y = df[["total_employment"]]
gam = LinearGAM(s(0, n_splines=200) + s(1, n_splines=200)+ te(2, 3)).gridsearch(X.values, y.values)
gam.summary()
```

```{python}
plt.figure()
fig, axs = plt.subplots(1,2)

titles = var
for i, ax in enumerate(axs):
    XX = gam.generate_X_grid(term=i)
    ax.plot(XX[:, i], gam.partial_dependence(term=i, X=XX))
    ax.plot(XX[:, i], gam.partial_dependence(term=i, X=XX, width=.95)[1], c='r', ls='--')
    if i == 0:
        ax.set_ylim(-30,30)
    ax.set_title(titles[i])
```